{
  "reference": {
    "path": "javadoc",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/javadoc"
  },
  "data": {},
  "description": "",
  "title": "README",
  "content": "<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2858%;\">\n<\/colgroup>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://github.com/holunda-io/camunda-bpm-data/actions\"><img src=\"https://github.com/holunda-io/camunda-bpm-data/workflows/default/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://maven-badges.herokuapp.com/maven-central/io.holunda.data/camunda-bpm-data\"><img src=\"https://maven-badges.herokuapp.com/maven-central/io.holunda.data/camunda-bpm-data/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://codecov.io/gh/holunda-io/camunda-bpm-data\"><img src=\"https://codecov.io/gh/holunda-io/camunda-bpm-data/branch/master/graph/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://app.codacy.com/app/zambrovski/camunda-bpm-data?utm_source=github.com&utm_medium=referral&utm_content=holunda-io/camunda-bpm-data&utm_campaign=Badge_Grade_Dashboard\"><img src=\"https://api.codacy.com/project/badge/Grade/653136bd5cad48c8a9f2621ee304ff26\" alt=\"653136bd5cad48c8a9f2621ee304ff26\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.holunda.io/camunda-bpm-data/license\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\" alt=\"License Apache%202.0 blue\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.holunda.io/camunda-bpm-data/changelog\"><img src=\"https://img.shields.io/badge/CHANGES----blue.svg\" alt=\"CHANGES    blue\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://gitter.im/holunda-io/camunda-bpm-data?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/holunda-io/camunda-bpm-data.svg\" alt=\"camunda bpm data\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<div class=\"sect1\">\n<h2 id=\"_camunda_bpm_data\">Camunda BPM Data<\/h2>\n<div class=\"sectionbody\">\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Beautiful process data handling for Camunda BPM.<\/p>\n<\/div>\n<\/blockquote>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_why_to_use_this_library_in_every_camunda_project\">Why to use this library in every Camunda project?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are a software engineer and run process automation projects in your company or on behalf of the customer\nbased on Camunda Process Engine, you probably are familiar with process variables. Camunda offers an API to access\nthem and thereby manipulate the state of the process execution - one of the core features during process automation.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Unfortunately, as a user of the Camunda API, you have to exactly know the variable type (so the Java class behind it).\nFor example, if you store a String in a variable <code>\"orderId\"<\/code> you must extract it as a String in every piece of code.\nSince there is no code connection between the different code parts, but the BPMN process model orchestrates\nthese snippets to a single process execution, it makes refactoring and testing of process automation projects\nerror-prone and challenging.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>This library helps you to overcome these difficulties and make access, manipulation and testing process variables really\neasy and convenient. We leverage the Camunda API and offer you not only a better API but also some <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features\">additional features<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If you want to read more about data in Camunda processes, have a look on those articles:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-1-2620bf9abd76\">Data in Process (Part 1)<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-2-7c6a109e6ee2\">Data in Process (Part 2)<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_quick_introduction\">Quick Introduction<\/h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_setup\">Setup<\/h3>\n<div class=\"paragraph\">\n<p>If you just want to start using the library, put the following dependency into your project <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data&lt;/artifactId&gt;\n  &lt;version&gt;1.2.0&lt;/version&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>If you are using Gradle Kotlin DSL add to your <code>build.gradle.kts<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">implementation(\"io.holunda.data:camunda-bpm-data:1.2.0\")<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>For Gradle Groovy DSL add to your <code>build.gradle<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">implementation 'io.holunda.data:camunda-bpm-data:1.2.0'<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_declaration\">Variable declaration<\/h3>\n<div class=\"paragraph\">\n<p>Now your setup is completed and you can declare your variables like this:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import io.holunda.camunda.bpm.data.factory.VariableFactory;\nimport static io.holunda.camunda.bpm.data.CamundaBpmData.*;\n\npublic class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_java_delegate\">Variable access from Java Delegate<\/h3>\n<div class=\"paragraph\">\n<p>And finally, you want to access them from your Java delegates, Execution or Task Listeners or simple Java components:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class MyDelegate implements JavaDelegate {\n  @Override\n  public void execute(DelegateExecution execution) {\n    VariableReader reader = CamundaBpmData.reader(execution);\n    OrderPosition orderPosition = reader.get(ORDER_POSITION);\n    BigDecimal oldTotal = reader.getOptional(ORDER_TOTAL).orElse(BigDecimal.ZERO);\n\n    BigDecimal newTotal = oldTotal.add(calculatePrice(orderPosition));\n    ORDER_TOTAL.on(execution).setLocal(newTotal);\n  }\n\n  private BigDecimal calculatePrice(OrderPosition orderPosition) {\n     return orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount()));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_rest_controller\">Variable access from REST Controller<\/h3>\n<div class=\"paragraph\">\n<p>Now imagine you are implementing a REST controller for a user task form which\nloads data from the process application, displays it, captures some input and\nsends that back to the process application to complete the user task. By doing so,\nyou will usually need to access process variables. Here is an example:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/task/approve-order\")\npublic class ApproveOrderTaskController {\n\n    private final TaskService taskService;\n\n    public ApproveOrderTaskController(TaskService taskService) {\n        this.taskService = taskService;\n    }\n\n    @GetMapping(\"/{taskId}\")\n    public ResponseEntity&lt;ApproveTaskDto&gt; loadTask(@PathVariable(\"taskId\") String taskId) {\n        Order order = ORDER.from(taskService, taskId).get();\n        return ResponseEntity.ok(new ApproveTaskDto(order));\n    }\n\n    @PostMapping(\"/{taskId}\")\n    public ResponseEntity&lt;Void&gt; completeTask(@PathVariable(\"taskId\") String taskId, @RequestBody ApproveTaskCompleteDto userInput) {\n        VariableMap vars = builder()\n            .set(ORDER_APPROVED, userInput.getApproved())\n            .build();\n        taskService.complete(taskId, vars);\n        return ResponseEntity.noContent().build();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_testing_correct_variable_access\">Testing correct variable access<\/h3>\n<div class=\"paragraph\">\n<p>If you want to write the test for the REST controller, you will need to stub\nthe task service and verify that the correct variables has been set. To simplify\nthese tests, we created an additional library module <code>camunda-bpm-data-test<\/code>.\nPlease put the following dependency into your <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data-test&lt;/artifactId&gt;\n  &lt;version&gt;1.0.1&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Now you can use <code>TaskServiceVariableMockBuilder<\/code> to stub correct behavior of Camunda Task Service\nand <code>TaskServiceVerifier<\/code> to verify the correct access to variables easily. Here is the JUnit\ntest of the REST controller above, making use of <code>camunda-bpm-data-test<\/code>.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class ApproveOrderTaskControllerTest {\n\n    private static Order order = new Order(\"ORDER-ID-1\", new Date(), new ArrayList&lt;&gt;());\n    private TaskService taskService = mock(TaskService.class);\n    private TaskServiceMockVerifier verifier = taskServiceMockVerifier(taskService);\n    private ApproveOrderTaskController controller = new ApproveOrderTaskController(taskService);\n    private String taskId;\n\n    @Before\n    public void prepareTest() {\n        reset(taskService);\n        taskId = UUID.randomUUID().toString();\n    }\n\n    @Test\n    public void testLoadTask() {\n        // given\n        taskServiceVariableMockBuilder(taskService).initial(ORDER, order).build();\n        // when\n        ResponseEntity&lt;ApproveTaskDto&gt; responseEntity = controller.loadTask(taskId);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(responseEntity.getBody()).isEqualTo(new ApproveTaskDto(order));\n        verifier.verifyGet(ORDER, taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n\n    @Test\n    public void testCompleteTask() {\n        // when\n        ApproveTaskCompleteDto response = new ApproveTaskCompleteDto(true);\n        ResponseEntity&lt;Void&gt; responseEntity = controller.completeTask(taskId, response);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n        verifier.verifyComplete(builder().set(ORDER_APPROVED, response.getApproved()).build(), taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_further_documentation\">Further documentation<\/h3>\n<div class=\"paragraph\">\n<p>For further details, please consult our <a href=\"https://www.holunda.io/camunda-bpm-data/quick-start\">Quick Start<\/a>\nguide or have a look to our primary documentation - <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide\">the User Guide<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_working_example\">Working Example<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We prepared some typical usage scenarios and implemented two example projects in Java and Kotlin.\nSee our <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples\">Examples<\/a> section for usage and configuration.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_license\">License<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This library is developed under <a href=\"https://www.holunda.io/camunda-bpm-data/license\">Apache License 2<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_contribution\">Contribution<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to contribute to this project, feel free to do so. Start with <a href=\"http://holunda.io/camunda-bpm-data/wiki/developer-guide/contribution\">Contributing guide<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_maintainer\">Maintainer<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://gihub.com/zambrovski\">Simon Zambrovski<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/christian-maschmann\">Christian Maschmann<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/jangalinski\">Jan Galinski<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
}