{
  "ownKey": "index",
  "childrenPages": {
    "javadoc": {
      "ownKey": "javadoc",
      "childrenPages": {"io": {
        "ownKey": "io",
        "childrenPages": {"holunda": {
          "ownKey": "holunda",
          "childrenPages": {"camunda": {
            "ownKey": "camunda",
            "childrenPages": {"bpm": {
              "ownKey": "bpm",
              "childrenPages": {"data": {
                "ownKey": "data",
                "childrenPages": {
                  "factory": {
                    "ownKey": "factory",
                    "childrenPages": {
                      "setvariablefactory": {
                        "ownKey": "setvariablefactory",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/factory/setvariablefactory",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/setvariablefactory"
                          },
                          "description": "",
                          "title": "SetVariableFactory",
                          "content": "<p>CommentComponent(kind=Text, text=Variable factory of a base parametrized set type., value=)<\/p>\n"
                        }]
                      },
                      "mapvariablefactory": {
                        "ownKey": "mapvariablefactory",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/factory/mapvariablefactory",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/mapvariablefactory"
                          },
                          "description": "",
                          "title": "MapVariableFactory",
                          "content": "<p>CommentComponent(kind=Text, text=Variable factory of a base parametrized map type., value=)<\/p>\n"
                        }]
                      },
                      "listvariablefactory": {
                        "ownKey": "listvariablefactory",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/factory/listvariablefactory",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/listvariablefactory"
                          },
                          "description": "",
                          "title": "ListVariableFactory",
                          "content": "<p>CommentComponent(kind=Text, text=Variable factory of a base parametrized list type., value=)<\/p>\n"
                        }]
                      },
                      "basicvariablefactory": {
                        "ownKey": "basicvariablefactory",
                        "childrenPages": {
                          "basiccaseserviceadapterbuilder": {
                            "ownKey": "basiccaseserviceadapterbuilder",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/factory/basicvariablefactory/basiccaseserviceadapterbuilder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/basicvariablefactory/basiccaseserviceadapterbuilder"
                              },
                              "description": "",
                              "title": "BasicVariableFactory.BasicCaseServiceAdapterBuilder",
                              "content": "<p>CommentComponent(kind=Text, text=Creates a builder to encapsulate the case service access., value=)<\/p>\n"
                            }]
                          },
                          "basicruntimeserviceadapterbuilder": {
                            "ownKey": "basicruntimeserviceadapterbuilder",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/factory/basicvariablefactory/basicruntimeserviceadapterbuilder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/basicvariablefactory/basicruntimeserviceadapterbuilder"
                              },
                              "description": "",
                              "title": "BasicVariableFactory.BasicRuntimeServiceAdapterBuilder",
                              "content": "<p>CommentComponent(kind=Text, text=Creates a builder to encapsulate the runtime service access., value=)<\/p>\n"
                            }]
                          },
                          "basictaskserviceadapterbuilder": {
                            "ownKey": "basictaskserviceadapterbuilder",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/factory/basicvariablefactory/basictaskserviceadapterbuilder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/basicvariablefactory/basictaskserviceadapterbuilder"
                              },
                              "description": "",
                              "title": "BasicVariableFactory.BasicTaskServiceAdapterBuilder",
                              "content": "<p>CommentComponent(kind=Text, text=Creates a builder to encapsulate the task service access., value=)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/factory/basicvariablefactory",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/basicvariablefactory"
                          },
                          "description": "",
                          "title": "BasicVariableFactory",
                          "content": "<p>CommentComponent(kind=Text, text=Variable factory of a base type(non parametrized)., value=)<\/p>\n"
                        }]
                      },
                      "variablefactory": {
                        "ownKey": "variablefactory",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/factory/variablefactory",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory/variablefactory"
                          },
                          "description": "",
                          "title": "VariableFactory",
                          "content": "<p>CommentComponent(kind=Text, text=Typed variable factory., value=)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "javadoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/factory",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/factory"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.factory",
                      "content": "<p>CommentComponent(kind=Text, text=Process Variable Factories are used to define process variables., value=)<\/p>\n"
                    }]
                  },
                  "adapter": {
                    "ownKey": "adapter",
                    "childrenPages": {
                      "writeadapter": {
                        "ownKey": "writeadapter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/writeadapter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/writeadapter"
                          },
                          "description": "",
                          "title": "WriteAdapter",
                          "content": "<p>CommentComponent(kind=Text, text=Write adapter to write values., value=)<\/p>\n"
                        }]
                      },
                      "wrongvariabletypeexception": {
                        "ownKey": "wrongvariabletypeexception",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/wrongvariabletypeexception",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/wrongvariabletypeexception"
                          },
                          "description": "",
                          "title": "WrongVariableTypeException",
                          "content": "<p>CommentComponent(kind=Text, text=Exception indicating that a variable has a different type than requested., value=)<\/p>\n"
                        }]
                      },
                      "set": {
                        "ownKey": "set",
                        "childrenPages": {
                          "setreadwriteadaptertaskservice": {
                            "ownKey": "setreadwriteadaptertaskservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptertaskservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptertaskservice"
                              },
                              "description": "",
                              "title": "SetReadWriteAdapterTaskService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for task service access., value=)<\/p>\n"
                            }]
                          },
                          "setreadwriteadaptervariablescope": {
                            "ownKey": "setreadwriteadaptervariablescope",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptervariablescope",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptervariablescope"
                              },
                              "description": "",
                              "title": "SetReadWriteAdapterVariableScope",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable scope., value=)<\/p>\n"
                            }]
                          },
                          "setreadwriteadaptervariablemap": {
                            "ownKey": "setreadwriteadaptervariablemap",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptervariablemap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptervariablemap"
                              },
                              "description": "",
                              "title": "SetReadWriteAdapterVariableMap",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable map., value=)<\/p>\n"
                            }]
                          },
                          "setreadwriteadapterruntimeservice": {
                            "ownKey": "setreadwriteadapterruntimeservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/set/setreadwriteadapterruntimeservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set/setreadwriteadapterruntimeservice"
                              },
                              "description": "",
                              "title": "SetReadWriteAdapterRuntimeService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for runtime service access., value=)<\/p>\n"
                            }]
                          },
                          "abstractsetreadwriteadapter": {
                            "ownKey": "abstractsetreadwriteadapter",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/set/abstractsetreadwriteadapter",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set/abstractsetreadwriteadapter"
                              },
                              "description": "",
                              "title": "AbstractSetReadWriteAdapter",
                              "content": "<p>CommentComponent(kind=Text, text=Base class for all set type read write adapter., value=)<\/p>\n"
                            }]
                          },
                          "setreadwriteadaptercaseservice": {
                            "ownKey": "setreadwriteadaptercaseservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptercaseservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set/setreadwriteadaptercaseservice"
                              },
                              "description": "",
                              "title": "SetReadWriteAdapterCaseService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for runtime service access., value=)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/set",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/set"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.adapter.set",
                          "content": "<p>CommentComponent(kind=Text, text=Read/Write adapters for set variable factory., value=)<\/p>\n"
                        }]
                      },
                      "collectiontypedvalueutil": {
                        "ownKey": "collectiontypedvalueutil",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/collectiontypedvalueutil",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/collectiontypedvalueutil"
                          },
                          "description": "",
                          "title": "CollectionTypedValueUtil",
                          "content": "<p>CommentComponent(kind=Text, text=Helper class to read values from collections., value=)<\/p>\n"
                        }]
                      },
                      "readadapter": {
                        "ownKey": "readadapter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/readadapter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/readadapter"
                          },
                          "description": "",
                          "title": "ReadAdapter",
                          "content": "<p>CommentComponent(kind=Text, text=Adapter to read variables., value=)<\/p>\n"
                        }]
                      },
                      "variablenotfoundexception": {
                        "ownKey": "variablenotfoundexception",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/variablenotfoundexception",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/variablenotfoundexception"
                          },
                          "description": "",
                          "title": "VariableNotFoundException",
                          "content": "<p>CommentComponent(kind=Text, text=Exception indicating that a variable is not found., value=)<\/p>\n"
                        }]
                      },
                      "list": {
                        "ownKey": "list",
                        "childrenPages": {
                          "listreadwriteadaptertaskservice": {
                            "ownKey": "listreadwriteadaptertaskservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptertaskservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptertaskservice"
                              },
                              "description": "",
                              "title": "ListReadWriteAdapterTaskService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for task service access., value=)<\/p>\n"
                            }]
                          },
                          "listreadwriteadaptervariablescope": {
                            "ownKey": "listreadwriteadaptervariablescope",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptervariablescope",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptervariablescope"
                              },
                              "description": "",
                              "title": "ListReadWriteAdapterVariableScope",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable scope., value=)<\/p>\n"
                            }]
                          },
                          "listreadwriteadaptercaseservice": {
                            "ownKey": "listreadwriteadaptercaseservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptercaseservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptercaseservice"
                              },
                              "description": "",
                              "title": "ListReadWriteAdapterCaseService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for case service access., value=)<\/p>\n"
                            }]
                          },
                          "listreadwriteadaptervariablemap": {
                            "ownKey": "listreadwriteadaptervariablemap",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptervariablemap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list/listreadwriteadaptervariablemap"
                              },
                              "description": "",
                              "title": "ListReadWriteAdapterVariableMap",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable map., value=)<\/p>\n"
                            }]
                          },
                          "listreadwriteadapterruntimeservice": {
                            "ownKey": "listreadwriteadapterruntimeservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/list/listreadwriteadapterruntimeservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list/listreadwriteadapterruntimeservice"
                              },
                              "description": "",
                              "title": "ListReadWriteAdapterRuntimeService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for runtime service access., value=)<\/p>\n"
                            }]
                          },
                          "abstractlistreadwriteadapter": {
                            "ownKey": "abstractlistreadwriteadapter",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/list/abstractlistreadwriteadapter",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list/abstractlistreadwriteadapter"
                              },
                              "description": "",
                              "title": "AbstractListReadWriteAdapter",
                              "content": "<p>CommentComponent(kind=Text, text=Base class for all list read-write adapter., value=)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/list",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/list"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.adapter.list",
                          "content": "<p>CommentComponent(kind=Text, text=Read/Write adapters for list variable factory., value=)<\/p>\n"
                        }]
                      },
                      "basic": {
                        "ownKey": "basic",
                        "childrenPages": {
                          "readwriteadaptertaskservice": {
                            "ownKey": "readwriteadaptertaskservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptertaskservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptertaskservice"
                              },
                              "description": "",
                              "title": "ReadWriteAdapterTaskService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for task service access., value=)<\/p>\n"
                            }]
                          },
                          "readwriteadapterruntimeservice": {
                            "ownKey": "readwriteadapterruntimeservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/basic/readwriteadapterruntimeservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic/readwriteadapterruntimeservice"
                              },
                              "description": "",
                              "title": "ReadWriteAdapterRuntimeService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for runtime service access., value=)<\/p>\n"
                            }]
                          },
                          "readwriteadaptervariablescope": {
                            "ownKey": "readwriteadaptervariablescope",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptervariablescope",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptervariablescope"
                              },
                              "description": "",
                              "title": "ReadWriteAdapterVariableScope",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable scope., value=)<\/p>\n"
                            }]
                          },
                          "readwriteadaptervariablemap": {
                            "ownKey": "readwriteadaptervariablemap",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptervariablemap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptervariablemap"
                              },
                              "description": "",
                              "title": "ReadWriteAdapterVariableMap",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable map., value=)<\/p>\n"
                            }]
                          },
                          "readwriteadaptercaseservice": {
                            "ownKey": "readwriteadaptercaseservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptercaseservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic/readwriteadaptercaseservice"
                              },
                              "description": "",
                              "title": "ReadWriteAdapterCaseService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for case service access., value=)<\/p>\n"
                            }]
                          },
                          "abstractbasicreadwriteadapter": {
                            "ownKey": "abstractbasicreadwriteadapter",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/basic/abstractbasicreadwriteadapter",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic/abstractbasicreadwriteadapter"
                              },
                              "description": "",
                              "title": "AbstractBasicReadWriteAdapter",
                              "content": "<p>CommentComponent(kind=Text, text=Base class for all basic read-write-adapter., value=)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/basic",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/basic"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.adapter.basic",
                          "content": "<p>CommentComponent(kind=Text, text=Read/Write adapters for basic variable factory., value=)<\/p>\n"
                        }]
                      },
                      "map": {
                        "ownKey": "map",
                        "childrenPages": {
                          "abstractmapreadwriteadapter": {
                            "ownKey": "abstractmapreadwriteadapter",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/map/abstractmapreadwriteadapter",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map/abstractmapreadwriteadapter"
                              },
                              "description": "",
                              "title": "AbstractMapReadWriteAdapter",
                              "content": "<p>CommentComponent(kind=Text, text=Base class for all map type read write adapter., value=)<\/p>\n"
                            }]
                          },
                          "mapreadwriteadaptercaseservice": {
                            "ownKey": "mapreadwriteadaptercaseservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptercaseservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptercaseservice"
                              },
                              "description": "",
                              "title": "MapReadWriteAdapterCaseService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for case service access., value=)<\/p>\n"
                            }]
                          },
                          "mapreadwriteadapterruntimeservice": {
                            "ownKey": "mapreadwriteadapterruntimeservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadapterruntimeservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadapterruntimeservice"
                              },
                              "description": "",
                              "title": "MapReadWriteAdapterRuntimeService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for runtime service access., value=)<\/p>\n"
                            }]
                          },
                          "mapreadwriteadaptervariablescope": {
                            "ownKey": "mapreadwriteadaptervariablescope",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptervariablescope",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptervariablescope"
                              },
                              "description": "",
                              "title": "MapReadWriteAdapterVariableScope",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable scope., value=)<\/p>\n"
                            }]
                          },
                          "mapreadwriteadaptertaskservice": {
                            "ownKey": "mapreadwriteadaptertaskservice",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptertaskservice",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptertaskservice"
                              },
                              "description": "",
                              "title": "MapReadWriteAdapterTaskService",
                              "content": "<p>CommentComponent(kind=Text, text=Read write adapter for task service access., value=)<\/p>\n"
                            }]
                          },
                          "mapreadwriteadaptervariablemap": {
                            "ownKey": "mapreadwriteadaptervariablemap",
                            "ownPages": [{
                              "reference": {
                                "path": "javadoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptervariablemap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map/mapreadwriteadaptervariablemap"
                              },
                              "description": "",
                              "title": "MapReadWriteAdapterVariableMap",
                              "content": "<p>CommentComponent(kind=Text, text=Read-write adapter for variable map., value=)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/map",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/map"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.adapter.map",
                          "content": "<p>CommentComponent(kind=Text, text=Read/Write adapters for map variable factory., value=)<\/p>\n"
                        }]
                      },
                      "abstractreadwriteadapter": {
                        "ownKey": "abstractreadwriteadapter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/adapter/abstractreadwriteadapter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter/abstractreadwriteadapter"
                          },
                          "description": "",
                          "title": "AbstractReadWriteAdapter",
                          "content": "<p>CommentComponent(kind=Text, text=Abstract read write adapter., value=)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "javadoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/adapter",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/adapter"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.adapter",
                      "content": "<p>CommentComponent(kind=Text, text=Read and Write adapters for different factories to handle different contexts., value=)<\/p>\n"
                    }]
                  },
                  "reader": {
                    "ownKey": "reader",
                    "childrenPages": {
                      "variablescopereader": {
                        "ownKey": "variablescopereader",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/reader/variablescopereader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader/variablescopereader"
                          },
                          "description": "",
                          "title": "VariableScopeReader",
                          "content": "<p>CommentComponent(kind=Text, text=Allows reading multiple variable values from, value=) CommentComponent(kind=see, text=VariableScope, value=) CommentComponent(kind=Text, text=(such as, value=) CommentComponent(kind=see, text=org.camunda.bpm.engine.delegate.DelegateExecution, value=) CommentComponent(kind=Text, text=and, value=) CommentComponent(kind=see, text=org.camunda.bpm.engine.delegate.DelegateTask, value=) CommentComponent(kind=Text, text=)., value=)<\/p>\n"
                        }]
                      },
                      "variablereader": {
                        "ownKey": "variablereader",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/reader/variablereader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader/variablereader"
                          },
                          "description": "",
                          "title": "VariableReader",
                          "content": "<p>CommentComponent(kind=Text, text=Inverting calls to, value=) CommentComponent(kind=typeName, text=ReadAdapter, value=io.holunda.camunda.bpm.data.adapter.ReadAdapter) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      },
                      "caseservicevariablereader": {
                        "ownKey": "caseservicevariablereader",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/reader/caseservicevariablereader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader/caseservicevariablereader"
                          },
                          "description": "",
                          "title": "CaseServiceVariableReader",
                          "content": "<p>CommentComponent(kind=Text, text=Allows reading multiple variable values from, value=) CommentComponent(kind=see, text=CaseService#getVariable(String, String), value=) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      },
                      "runtimeservicevariablereader": {
                        "ownKey": "runtimeservicevariablereader",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/reader/runtimeservicevariablereader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader/runtimeservicevariablereader"
                          },
                          "description": "",
                          "title": "RuntimeServiceVariableReader",
                          "content": "<p>CommentComponent(kind=Text, text=Allows reading multiple variable values from, value=) CommentComponent(kind=see, text=RuntimeService#getVariable(String, String), value=) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      },
                      "taskservicevariablereader": {
                        "ownKey": "taskservicevariablereader",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/reader/taskservicevariablereader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader/taskservicevariablereader"
                          },
                          "description": "",
                          "title": "TaskServiceVariableReader",
                          "content": "<p>CommentComponent(kind=Text, text=Allows reading multiple variable values from, value=) CommentComponent(kind=see, text=TaskService#getVariable(String, String), value=) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      },
                      "variablemapreader": {
                        "ownKey": "variablemapreader",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/reader/variablemapreader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader/variablemapreader"
                          },
                          "description": "",
                          "title": "VariableMapReader",
                          "content": "<p>CommentComponent(kind=Text, text=Allows reading multiple variable values from, value=) CommentComponent(kind=see, text=VariableMap#getValue(String, Class), value=) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "javadoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/reader",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/reader"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.reader",
                      "content": "<p>CommentComponent(kind=Text, text=Readers are used to interact with multiple variables in the same context., value=)<\/p>\n"
                    }]
                  },
                  "builder": {
                    "ownKey": "builder",
                    "childrenPages": {"variablemapbuilder": {
                      "ownKey": "variablemapbuilder",
                      "ownPages": [{
                        "reference": {
                          "path": "javadoc",
                          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                          "fileName": "io/holunda/camunda/bpm/data/builder/variablemapbuilder",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/builder/variablemapbuilder"
                        },
                        "description": "",
                        "title": "VariableMapBuilder",
                        "content": "<p>CommentComponent(kind=Text, text=Builder to create, value=) CommentComponent(kind=see, text=VariableMap, value=) CommentComponent(kind=Text, text=using, value=) CommentComponent(kind=typeName, text=VariableFactory, value=io.holunda.camunda.bpm.data.factory.VariableFactory) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "javadoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/builder",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/builder"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.builder",
                      "content": "<p>CommentComponent(kind=Text, text=Writers are used to create multiple variables inside a variable map., value=)<\/p>\n"
                    }]
                  },
                  "writer": {
                    "ownKey": "writer",
                    "childrenPages": {
                      "variablemapwriter": {
                        "ownKey": "variablemapwriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/variablemapwriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/variablemapwriter"
                          },
                          "description": "",
                          "title": "VariableMapWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Variable map builder allowing for fluent variable setting., value=)<\/p>\n"
                        }]
                      },
                      "variablewriter": {
                        "ownKey": "variablewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/variablewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/variablewriter"
                          },
                          "description": "",
                          "title": "VariableWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Inverting calls to, value=) CommentComponent(kind=typeName, text=WriteAdapter, value=io.holunda.camunda.bpm.data.adapter.WriteAdapter) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      },
                      "runtimeservicevariablewriter": {
                        "ownKey": "runtimeservicevariablewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/runtimeservicevariablewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/runtimeservicevariablewriter"
                          },
                          "description": "",
                          "title": "RuntimeServiceVariableWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Process execution builder allowing for fluent variable setting., value=)<\/p>\n"
                        }]
                      },
                      "taskservicevariablewriter": {
                        "ownKey": "taskservicevariablewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/taskservicevariablewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/taskservicevariablewriter"
                          },
                          "description": "",
                          "title": "TaskServiceVariableWriter",
                          "content": "<p>CommentComponent(kind=Text, text=User task builder allowing for fluent variable setting., value=)<\/p>\n"
                        }]
                      },
                      "variablescopewriter": {
                        "ownKey": "variablescopewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/variablescopewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/variablescopewriter"
                          },
                          "description": "",
                          "title": "VariableScopeWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Variable scope builder allowing for fluent variable setting., value=)<\/p>\n"
                        }]
                      },
                      "globalvariablewriter": {
                        "ownKey": "globalvariablewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/globalvariablewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/globalvariablewriter"
                          },
                          "description": "",
                          "title": "GlobalVariableWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Inverting calls to, value=) CommentComponent(kind=typeName, text=WriteAdapter, value=io.holunda.camunda.bpm.data.adapter.WriteAdapter) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      },
                      "caseservicevariablewriter": {
                        "ownKey": "caseservicevariablewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/caseservicevariablewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/caseservicevariablewriter"
                          },
                          "description": "",
                          "title": "CaseServiceVariableWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Process execution builder allowing for fluent variable setting., value=)<\/p>\n"
                        }]
                      },
                      "localvariablewriter": {
                        "ownKey": "localvariablewriter",
                        "ownPages": [{
                          "reference": {
                            "path": "javadoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/writer/localvariablewriter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer/localvariablewriter"
                          },
                          "description": "",
                          "title": "LocalVariableWriter",
                          "content": "<p>CommentComponent(kind=Text, text=Inverting calls to, value=) CommentComponent(kind=typeName, text=WriteAdapter, value=io.holunda.camunda.bpm.data.adapter.WriteAdapter) CommentComponent(kind=Text, text=., value=)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "javadoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/writer",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/writer"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.writer",
                      "content": "<p>CommentComponent(kind=Text, text=Writers are used to interact with multiple variables in the same context., value=)<\/p>\n"
                    }]
                  },
                  "camundabpmdata": {
                    "ownKey": "camundabpmdata",
                    "ownPages": [{
                      "reference": {
                        "path": "javadoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/camundabpmdata",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data/camundabpmdata"
                      },
                      "description": "",
                      "title": "CamundaBpmData",
                      "content": "<p>CommentComponent(kind=Text, text=Provides a collection of factory methods for creating variable factories., value=)<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "javadoc",
                    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                    "fileName": "io/holunda/camunda/bpm/data",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://www.holunda.io/camunda-bpm-data/javadoc/io/holunda/camunda/bpm/data"
                  },
                  "description": "",
                  "title": "io.holunda.camunda.bpm.data",
                  "content": "<p>CommentComponent(kind=Text, text=Top-level package of the library., value=)<\/p>\n"
                }]
              }}
            }}
          }}
        }}
      }},
      "ownPages": [{
        "reference": {
          "path": "javadoc",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/javadoc"
        },
        "description": "",
        "title": "README",
        "content": "<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2858%;\">\n<\/colgroup>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://github.com/holunda-io/camunda-bpm-data/actions\"><img src=\"https://github.com/holunda-io/camunda-bpm-data/workflows/default/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://maven-badges.herokuapp.com/maven-central/io.holunda.data/camunda-bpm-data\"><img src=\"https://maven-badges.herokuapp.com/maven-central/io.holunda.data/camunda-bpm-data/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://codecov.io/gh/holunda-io/camunda-bpm-data\"><img src=\"https://codecov.io/gh/holunda-io/camunda-bpm-data/branch/master/graph/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://app.codacy.com/app/zambrovski/camunda-bpm-data?utm_source=github.com&utm_medium=referral&utm_content=holunda-io/camunda-bpm-data&utm_campaign=Badge_Grade_Dashboard\"><img src=\"https://api.codacy.com/project/badge/Grade/653136bd5cad48c8a9f2621ee304ff26\" alt=\"653136bd5cad48c8a9f2621ee304ff26\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.holunda.io/camunda-bpm-data/license\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\" alt=\"License Apache%202.0 blue\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.holunda.io/camunda-bpm-data/changelog\"><img src=\"https://img.shields.io/badge/CHANGES----blue.svg\" alt=\"CHANGES    blue\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://gitter.im/holunda-io/camunda-bpm-data?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/holunda-io/camunda-bpm-data.svg\" alt=\"camunda bpm data\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<div class=\"sect1\">\n<h2 id=\"_camunda_bpm_data\">Camunda BPM Data<\/h2>\n<div class=\"sectionbody\">\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Beautiful process data handling for Camunda BPM.<\/p>\n<\/div>\n<\/blockquote>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_why_to_use_this_library_in_every_camunda_project\">Why to use this library in every Camunda project?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are a software engineer and run process automation projects in your company or on behalf of the customer\nbased on Camunda Process Engine, you probably are familiar with process variables. Camunda offers an API to access\nthem and thereby manipulate the state of the process execution - one of the core features during process automation.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Unfortunately, as a user of the Camunda API, you have to exactly know the variable type (so the Java class behind it).\nFor example, if you store a String in a variable <code>\"orderId\"<\/code> you must extract it as a String in every piece of code.\nSince there is no code connection between the different code parts, but the BPMN process model orchestrates\nthese snippets to a single process execution, it makes refactoring and testing of process automation projects\nerror-prone and challenging.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>This library helps you to overcome these difficulties and make access, manipulation and testing process variables really\neasy and convenient. We leverage the Camunda API and offer you not only a better API but also some <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features\">additional features<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If you want to read more about data in Camunda processes, have a look on those articles:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-1-2620bf9abd76\">Data in Process (Part 1)<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-2-7c6a109e6ee2\">Data in Process (Part 2)<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_quick_introduction\">Quick Introduction<\/h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_setup\">Setup<\/h3>\n<div class=\"paragraph\">\n<p>If you just want to start using the library, put the following dependency into your project <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data&lt;/artifactId&gt;\n  &lt;version&gt;1.2.0&lt;/version&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>If you are using Gradle Kotlin DSL add to your <code>build.gradle.kts<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">implementation(\"io.holunda.data:camunda-bpm-data:1.2.0\")<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>For Gradle Groovy DSL add to your <code>build.gradle<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">implementation 'io.holunda.data:camunda-bpm-data:1.2.0'<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_declaration\">Variable declaration<\/h3>\n<div class=\"paragraph\">\n<p>Now your setup is completed and you can declare your variables like this:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import io.holunda.camunda.bpm.data.factory.VariableFactory;\nimport static io.holunda.camunda.bpm.data.CamundaBpmData.*;\n\npublic class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_java_delegate\">Variable access from Java Delegate<\/h3>\n<div class=\"paragraph\">\n<p>And finally, you want to access them from your Java delegates, Execution or Task Listeners or simple Java components:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class MyDelegate implements JavaDelegate {\n  @Override\n  public void execute(DelegateExecution execution) {\n    VariableReader reader = CamundaBpmData.reader(execution);\n    OrderPosition orderPosition = reader.get(ORDER_POSITION);\n    BigDecimal oldTotal = reader.getOptional(ORDER_TOTAL).orElse(BigDecimal.ZERO);\n\n    BigDecimal newTotal = oldTotal.add(calculatePrice(orderPosition));\n    ORDER_TOTAL.on(execution).setLocal(newTotal);\n  }\n\n  private BigDecimal calculatePrice(OrderPosition orderPosition) {\n     return orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount()));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_rest_controller\">Variable access from REST Controller<\/h3>\n<div class=\"paragraph\">\n<p>Now imagine you are implementing a REST controller for a user task form which\nloads data from the process application, displays it, captures some input and\nsends that back to the process application to complete the user task. By doing so,\nyou will usually need to access process variables. Here is an example:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/task/approve-order\")\npublic class ApproveOrderTaskController {\n\n    private final TaskService taskService;\n\n    public ApproveOrderTaskController(TaskService taskService) {\n        this.taskService = taskService;\n    }\n\n    @GetMapping(\"/{taskId}\")\n    public ResponseEntity&lt;ApproveTaskDto&gt; loadTask(@PathVariable(\"taskId\") String taskId) {\n        Order order = ORDER.from(taskService, taskId).get();\n        return ResponseEntity.ok(new ApproveTaskDto(order));\n    }\n\n    @PostMapping(\"/{taskId}\")\n    public ResponseEntity&lt;Void&gt; completeTask(@PathVariable(\"taskId\") String taskId, @RequestBody ApproveTaskCompleteDto userInput) {\n        VariableMap vars = builder()\n            .set(ORDER_APPROVED, userInput.getApproved())\n            .build();\n        taskService.complete(taskId, vars);\n        return ResponseEntity.noContent().build();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_testing_correct_variable_access\">Testing correct variable access<\/h3>\n<div class=\"paragraph\">\n<p>If you want to write the test for the REST controller, you will need to stub\nthe task service and verify that the correct variables has been set. To simplify\nthese tests, we created an additional library module <code>camunda-bpm-data-test<\/code>.\nPlease put the following dependency into your <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data-test&lt;/artifactId&gt;\n  &lt;version&gt;1.0.1&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Now you can use <code>TaskServiceVariableMockBuilder<\/code> to stub correct behavior of Camunda Task Service\nand <code>TaskServiceVerifier<\/code> to verify the correct access to variables easily. Here is the JUnit\ntest of the REST controller above, making use of <code>camunda-bpm-data-test<\/code>.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class ApproveOrderTaskControllerTest {\n\n    private static Order order = new Order(\"ORDER-ID-1\", new Date(), new ArrayList&lt;&gt;());\n    private TaskService taskService = mock(TaskService.class);\n    private TaskServiceMockVerifier verifier = taskServiceMockVerifier(taskService);\n    private ApproveOrderTaskController controller = new ApproveOrderTaskController(taskService);\n    private String taskId;\n\n    @Before\n    public void prepareTest() {\n        reset(taskService);\n        taskId = UUID.randomUUID().toString();\n    }\n\n    @Test\n    public void testLoadTask() {\n        // given\n        taskServiceVariableMockBuilder(taskService).initial(ORDER, order).build();\n        // when\n        ResponseEntity&lt;ApproveTaskDto&gt; responseEntity = controller.loadTask(taskId);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(responseEntity.getBody()).isEqualTo(new ApproveTaskDto(order));\n        verifier.verifyGet(ORDER, taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n\n    @Test\n    public void testCompleteTask() {\n        // when\n        ApproveTaskCompleteDto response = new ApproveTaskCompleteDto(true);\n        ResponseEntity&lt;Void&gt; responseEntity = controller.completeTask(taskId, response);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n        verifier.verifyComplete(builder().set(ORDER_APPROVED, response.getApproved()).build(), taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_further_documentation\">Further documentation<\/h3>\n<div class=\"paragraph\">\n<p>For further details, please consult our <a href=\"https://www.holunda.io/camunda-bpm-data/quick-start\">Quick Start<\/a>\nguide or have a look to our primary documentation - <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide\">the User Guide<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_working_example\">Working Example<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We prepared some typical usage scenarios and implemented two example projects in Java and Kotlin.\nSee our <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples\">Examples<\/a> section for usage and configuration.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_license\">License<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This library is developed under <a href=\"https://www.holunda.io/camunda-bpm-data/license\">Apache License 2<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_contribution\">Contribution<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to contribute to this project, feel free to do so. Start with <a href=\"http://holunda.io/camunda-bpm-data/wiki/developer-guide/contribution\">Contributing guide<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_maintainer\">Maintainer<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://gihub.com/zambrovski\">Simon Zambrovski<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/christian-maschmann\">Christian Maschmann<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/jangalinski\">Jan Galinski<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
      }]
    },
    "kotlindoc": {
      "ownKey": "kotlindoc",
      "childrenPages": {"io": {
        "ownKey": "io",
        "childrenPages": {"holunda": {
          "ownKey": "holunda",
          "childrenPages": {"camunda": {
            "ownKey": "camunda",
            "childrenPages": {"bpm": {
              "ownKey": "bpm",
              "childrenPages": {"data": {
                "ownKey": "data",
                "childrenPages": {
                  "adapter": {
                    "ownKey": "adapter",
                    "childrenPages": {"valuewrapperutil": {
                      "ownKey": "valuewrapperutil",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                          "fileName": "io/holunda/camunda/bpm/data/adapter/valuewrapperutil",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/adapter/valuewrapperutil"
                        },
                        "description": "",
                        "title": "ValueWrapperUtil",
                        "content": "<p>CommentComponent(kind=text, text=Static util methods to detect Camunda's value type best fitting to the requested class., value=null)<\/p>\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/adapter",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/adapter"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.adapter",
                      "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                    }]
                  },
                  "guard": {
                    "ownKey": "guard",
                    "childrenPages": {
                      "condition": {
                        "ownKey": "condition",
                        "childrenPages": {
                          "variableguardcondition": {
                            "ownKey": "variableguardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/condition/variableguardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition/variableguardcondition"
                              },
                              "description": "",
                              "title": "VariableGuardCondition",
                              "content": "<p>CommentComponent(kind=text, text=Abstract guard condition., value=null)<\/p>\n"
                            }]
                          },
                          "variablematchesguardcondition": {
                            "ownKey": "variablematchesguardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/condition/variablematchesguardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition/variablematchesguardcondition"
                              },
                              "description": "",
                              "title": "VariableMatchesGuardCondition",
                              "content": "<p>CommentComponent(kind=text, text=Guard for testing a condition passed by a matcher-function., value=null)<\/p>\n"
                            }]
                          },
                          "variablevalueguardcondition": {
                            "ownKey": "variablevalueguardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/condition/variablevalueguardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition/variablevalueguardcondition"
                              },
                              "description": "",
                              "title": "VariableValueGuardCondition",
                              "content": "<p>CommentComponent(kind=text, text=Condition to check if the variable has provided value., value=null)<\/p>\n"
                            }]
                          },
                          "variablenotexistsguardcondition": {
                            "ownKey": "variablenotexistsguardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/condition/variablenotexistsguardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition/variablenotexistsguardcondition"
                              },
                              "description": "",
                              "title": "VariableNotExistsGuardCondition",
                              "content": "<p>CommentComponent(kind=text, text=Condition to check if the variable doesn't exist., value=null)<\/p>\n"
                            }]
                          },
                          "variableexistsguardcondition": {
                            "ownKey": "variableexistsguardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/condition/variableexistsguardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition/variableexistsguardcondition"
                              },
                              "description": "",
                              "title": "VariableExistsGuardCondition",
                              "content": "<p>CommentComponent(kind=text, text=Condition to check if the variable exists., value=null)<\/p>\n"
                            }]
                          },
                          "variablevalueoneofguardcondition": {
                            "ownKey": "variablevalueoneofguardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/condition/variablevalueoneofguardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition/variablevalueoneofguardcondition"
                              },
                              "description": "",
                              "title": "VariableValueOneOfGuardCondition",
                              "content": "<p>CommentComponent(kind=text, text=Condition to check if the variable has on of the provided values., value=null)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/guard/condition",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/condition"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.guard.condition",
                          "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                        }]
                      },
                      "camundabpmdataguards": {
                        "ownKey": "camundabpmdataguards",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/guard/camundabpmdataguards",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/camundabpmdataguards"
                          },
                          "description": "",
                          "title": "CamundaBpmDataGuards",
                          "content": "<p>CommentComponent(kind=text, text=Guard creation methods., value=null)<\/p>\n"
                        }]
                      },
                      "integration": {
                        "ownKey": "integration",
                        "childrenPages": {
                          "guardviolationexception": {
                            "ownKey": "guardviolationexception",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/integration/guardviolationexception",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/integration/guardviolationexception"
                              },
                              "description": "",
                              "title": "GuardViolationException",
                              "content": "<p>CommentComponent(kind=text, text=Exception indicating a guard violation., value=null)<\/p>\n"
                            }]
                          },
                          "defaultguardexecutionlistener": {
                            "ownKey": "defaultguardexecutionlistener",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/integration/defaultguardexecutionlistener",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/integration/defaultguardexecutionlistener"
                              },
                              "description": "",
                              "title": "DefaultGuardExecutionListener",
                              "content": "<p>CommentComponent(kind=text, text=Default guard execution listener, evaluating the given guard conditions on the execution., value=null)<\/p>\n"
                            }]
                          },
                          "defaultguardtasklistener": {
                            "ownKey": "defaultguardtasklistener",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/guard/integration/defaultguardtasklistener",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/integration/defaultguardtasklistener"
                              },
                              "description": "",
                              "title": "DefaultGuardTaskListener",
                              "content": "<p>CommentComponent(kind=text, text=Default guard execution listener, evaluating the given guard conditions on the task., value=null)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/guard/integration",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/integration"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.guard.integration",
                          "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                        }]
                      },
                      "guardviolation": {
                        "ownKey": "guardviolation",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/guard/guardviolation",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/guardviolation"
                          },
                          "description": "",
                          "title": "GuardViolation",
                          "content": "<p>CommentComponent(kind=text, text=Represents a violation of a guard., value=null)<\/p>\n"
                        }]
                      },
                      "variablesguard": {
                        "ownKey": "variablesguard",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/guard/variablesguard",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard/variablesguard"
                          },
                          "description": "",
                          "title": "VariablesGuard",
                          "content": "<p>CommentComponent(kind=text, text=Guard on a set of variables., value=null)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/guard",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/guard"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.guard",
                      "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                    }]
                  },
                  "camundabpmdatakotlin": {
                    "ownKey": "camundabpmdatakotlin",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/camundabpmdatakotlin",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/camundabpmdatakotlin"
                      },
                      "description": "",
                      "title": "CamundaBpmDataKotlin",
                      "content": "<p>CommentComponent(kind=text, text=Provides reified methods for variable factory construction., value=null)<\/p>\n"
                    }]
                  },
                  "acl": {
                    "ownKey": "acl",
                    "childrenPages": {
                      "transform": {
                        "ownKey": "transform",
                        "childrenPages": {
                          "identityvariablemaptransformer": {
                            "ownKey": "identityvariablemaptransformer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/acl/transform/identityvariablemaptransformer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/transform/identityvariablemaptransformer"
                              },
                              "description": "",
                              "title": "IdentityVariableMapTransformer",
                              "content": "<p>CommentComponent(kind=text, text=Performs no transformation (1:1 mapping)., value=null)<\/p>\n"
                            }]
                          },
                          "variablemaptransformer": {
                            "ownKey": "variablemaptransformer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/acl/transform/variablemaptransformer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/transform/variablemaptransformer"
                              },
                              "description": "",
                              "title": "VariableMapTransformer",
                              "content": "<p>CommentComponent(kind=text, text=Transforms values to the internal representation protected by the ACL., value=null)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/acl/transform",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/transform"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.acl.transform",
                          "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                        }]
                      },
                      "apply": {
                        "ownKey": "apply",
                        "childrenPages": {
                          "valueapplicationstrategy": {
                            "ownKey": "valueapplicationstrategy",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/acl/apply/valueapplicationstrategy",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/apply/valueapplicationstrategy"
                              },
                              "description": "",
                              "title": "ValueApplicationStrategy",
                              "content": "<p>CommentComponent(kind=text, text=Interface describing the strategy to assign values., value=null)<\/p>\n"
                            }]
                          },
                          "localscopereplacestrategy": {
                            "ownKey": "localscopereplacestrategy",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/acl/apply/localscopereplacestrategy",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/apply/localscopereplacestrategy"
                              },
                              "description": "",
                              "title": "LocalScopeReplaceStrategy",
                              "content": "<p>CommentComponent(kind=text, text=Replaces variables of local scope with given variable map., value=null)<\/p>\n"
                            }]
                          },
                          "globalscopereplacestrategy": {
                            "ownKey": "globalscopereplacestrategy",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                                "fileName": "io/holunda/camunda/bpm/data/acl/apply/globalscopereplacestrategy",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/apply/globalscopereplacestrategy"
                              },
                              "description": "",
                              "title": "GlobalScopeReplaceStrategy",
                              "content": "<p>CommentComponent(kind=text, text=Replaces variables of (global) scope with given variable map., value=null)<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/acl/apply",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/apply"
                          },
                          "description": "",
                          "title": "io.holunda.camunda.bpm.data.acl.apply",
                          "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                        }]
                      },
                      "camundabpmdatamapper": {
                        "ownKey": "camundabpmdatamapper",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/acl/camundabpmdatamapper",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/camundabpmdatamapper"
                          },
                          "description": "",
                          "title": "CamundaBpmDataMapper",
                          "content": "<p>CommentComponent(kind=text, text=Helper methods to create unconditional transient variable mappers., value=null)<\/p>\n"
                        }]
                      },
                      "anticorruptionlayer": {
                        "ownKey": "anticorruptionlayer",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/acl/anticorruptionlayer",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/anticorruptionlayer"
                          },
                          "description": "",
                          "title": "AntiCorruptionLayer",
                          "content": "<p>CommentComponent(kind=text, text=Defines the ACL (Anti-Corruption-Layer)., value=null)<\/p>\n"
                        }]
                      },
                      "camundabpmdataacl": {
                        "ownKey": "camundabpmdataacl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/acl/camundabpmdataacl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl/camundabpmdataacl"
                          },
                          "description": "",
                          "title": "CamundaBpmDataACL",
                          "content": "<p>CommentComponent(kind=text, text=Helper methods to create anti corruption layers., value=null)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/acl",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/acl"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.acl",
                      "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                    }]
                  },
                  "mockito": {
                    "ownKey": "mockito",
                    "childrenPages": {
                      "runtimeservicemockverifier": {
                        "ownKey": "runtimeservicemockverifier",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/runtimeservicemockverifier",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/runtimeservicemockverifier"
                          },
                          "description": "",
                          "title": "RuntimeServiceMockVerifier",
                          "content": "<p>CommentComponent(kind=text, text=Verifier for a mocked runtime service.\nProvides methods for easy verification., value=null)<\/p>\n"
                        }]
                      },
                      "caseservicemockverifier": {
                        "ownKey": "caseservicemockverifier",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/caseservicemockverifier",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/caseservicemockverifier"
                          },
                          "description": "",
                          "title": "CaseServiceMockVerifier",
                          "content": "<p>CommentComponent(kind=text, text=Verifier for a mocked runtime service.\nProvides methods for easy verification., value=null)<\/p>\n"
                        }]
                      },
                      "runtimeservicevariablemockbuilder": {
                        "ownKey": "runtimeservicevariablemockbuilder",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/runtimeservicevariablemockbuilder",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/runtimeservicevariablemockbuilder"
                          },
                          "description": "",
                          "title": "RuntimeServiceVariableMockBuilder",
                          "content": "<p>CommentComponent(kind=text, text=Builder to mock the runtime service behavior regarding variables., value=null)<\/p>\n"
                        }]
                      },
                      "caseservicevariablemockbuilder": {
                        "ownKey": "caseservicevariablemockbuilder",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/caseservicevariablemockbuilder",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/caseservicevariablemockbuilder"
                          },
                          "description": "",
                          "title": "CaseServiceVariableMockBuilder",
                          "content": "<p>CommentComponent(kind=text, text=Builder to mock the runtime service behavior regarding variables., value=null)<\/p>\n"
                        }]
                      },
                      "taskservicevariablemockbuilder": {
                        "ownKey": "taskservicevariablemockbuilder",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/taskservicevariablemockbuilder",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/taskservicevariablemockbuilder"
                          },
                          "description": "",
                          "title": "TaskServiceVariableMockBuilder",
                          "content": "<p>CommentComponent(kind=text, text=Builder to mock the task service behavior regarding variables., value=null)<\/p>\n"
                        }]
                      },
                      "camundabpmdatamockito": {
                        "ownKey": "camundabpmdatamockito",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/camundabpmdatamockito",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/camundabpmdatamockito"
                          },
                          "description": "",
                          "title": "CamundaBpmDataMockito",
                          "content": "<p>CommentComponent(kind=text, text=Collection of fluent mock builder factory methods., value=null)<\/p>\n"
                        }]
                      },
                      "taskservicemockverifier": {
                        "ownKey": "taskservicemockverifier",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                            "fileName": "io/holunda/camunda/bpm/data/mockito/taskservicemockverifier",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito/taskservicemockverifier"
                          },
                          "description": "",
                          "title": "TaskServiceMockVerifier",
                          "content": "<p>CommentComponent(kind=text, text=Verifier for a mocked task service.\nProvides methods for easy verification., value=null)<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                        "fileName": "io/holunda/camunda/bpm/data/mockito",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data/mockito"
                      },
                      "description": "",
                      "title": "io.holunda.camunda.bpm.data.mockito",
                      "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                    "fileName": "io/holunda/camunda/bpm/data",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc/io/holunda/camunda/bpm/data"
                  },
                  "description": "",
                  "title": "io.holunda.camunda.bpm.data",
                  "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                }]
              }}
            }}
          }}
        }}
      }},
      "ownPages": [{
        "reference": {
          "path": "kotlindoc",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/kotlindoc"
        },
        "description": "",
        "title": "README",
        "content": "<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2857%;\">\n<col style=\"width: 14.2858%;\">\n<\/colgroup>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://github.com/holunda-io/camunda-bpm-data/actions\"><img src=\"https://github.com/holunda-io/camunda-bpm-data/workflows/default/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://maven-badges.herokuapp.com/maven-central/io.holunda.data/camunda-bpm-data\"><img src=\"https://maven-badges.herokuapp.com/maven-central/io.holunda.data/camunda-bpm-data/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://codecov.io/gh/holunda-io/camunda-bpm-data\"><img src=\"https://codecov.io/gh/holunda-io/camunda-bpm-data/branch/master/graph/badge.svg\" alt=\"badge\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://app.codacy.com/app/zambrovski/camunda-bpm-data?utm_source=github.com&utm_medium=referral&utm_content=holunda-io/camunda-bpm-data&utm_campaign=Badge_Grade_Dashboard\"><img src=\"https://api.codacy.com/project/badge/Grade/653136bd5cad48c8a9f2621ee304ff26\" alt=\"653136bd5cad48c8a9f2621ee304ff26\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.holunda.io/camunda-bpm-data/license\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\" alt=\"License Apache%202.0 blue\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.holunda.io/camunda-bpm-data/changelog\"><img src=\"https://img.shields.io/badge/CHANGES----blue.svg\" alt=\"CHANGES    blue\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://gitter.im/holunda-io/camunda-bpm-data?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/holunda-io/camunda-bpm-data.svg\" alt=\"camunda bpm data\"><\/a>\n<\/div>\n<\/div><\/div><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<div class=\"sect1\">\n<h2 id=\"_camunda_bpm_data\">Camunda BPM Data<\/h2>\n<div class=\"sectionbody\">\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Beautiful process data handling for Camunda BPM.<\/p>\n<\/div>\n<\/blockquote>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_why_to_use_this_library_in_every_camunda_project\">Why to use this library in every Camunda project?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are a software engineer and run process automation projects in your company or on behalf of the customer\nbased on Camunda Process Engine, you probably are familiar with process variables. Camunda offers an API to access\nthem and thereby manipulate the state of the process execution - one of the core features during process automation.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Unfortunately, as a user of the Camunda API, you have to exactly know the variable type (so the Java class behind it).\nFor example, if you store a String in a variable <code>\"orderId\"<\/code> you must extract it as a String in every piece of code.\nSince there is no code connection between the different code parts, but the BPMN process model orchestrates\nthese snippets to a single process execution, it makes refactoring and testing of process automation projects\nerror-prone and challenging.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>This library helps you to overcome these difficulties and make access, manipulation and testing process variables really\neasy and convenient. We leverage the Camunda API and offer you not only a better API but also some <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features\">additional features<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If you want to read more about data in Camunda processes, have a look on those articles:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-1-2620bf9abd76\">Data in Process (Part 1)<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-2-7c6a109e6ee2\">Data in Process (Part 2)<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_quick_introduction\">Quick Introduction<\/h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_setup\">Setup<\/h3>\n<div class=\"paragraph\">\n<p>If you just want to start using the library, put the following dependency into your project <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data&lt;/artifactId&gt;\n  &lt;version&gt;1.2.0&lt;/version&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>If you are using Gradle Kotlin DSL add to your <code>build.gradle.kts<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">implementation(\"io.holunda.data:camunda-bpm-data:1.2.0\")<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>For Gradle Groovy DSL add to your <code>build.gradle<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">implementation 'io.holunda.data:camunda-bpm-data:1.2.0'<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_declaration\">Variable declaration<\/h3>\n<div class=\"paragraph\">\n<p>Now your setup is completed and you can declare your variables like this:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import io.holunda.camunda.bpm.data.factory.VariableFactory;\nimport static io.holunda.camunda.bpm.data.CamundaBpmData.*;\n\npublic class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_java_delegate\">Variable access from Java Delegate<\/h3>\n<div class=\"paragraph\">\n<p>And finally, you want to access them from your Java delegates, Execution or Task Listeners or simple Java components:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class MyDelegate implements JavaDelegate {\n  @Override\n  public void execute(DelegateExecution execution) {\n    VariableReader reader = CamundaBpmData.reader(execution);\n    OrderPosition orderPosition = reader.get(ORDER_POSITION);\n    BigDecimal oldTotal = reader.getOptional(ORDER_TOTAL).orElse(BigDecimal.ZERO);\n\n    BigDecimal newTotal = oldTotal.add(calculatePrice(orderPosition));\n    ORDER_TOTAL.on(execution).setLocal(newTotal);\n  }\n\n  private BigDecimal calculatePrice(OrderPosition orderPosition) {\n     return orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount()));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_rest_controller\">Variable access from REST Controller<\/h3>\n<div class=\"paragraph\">\n<p>Now imagine you are implementing a REST controller for a user task form which\nloads data from the process application, displays it, captures some input and\nsends that back to the process application to complete the user task. By doing so,\nyou will usually need to access process variables. Here is an example:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/task/approve-order\")\npublic class ApproveOrderTaskController {\n\n    private final TaskService taskService;\n\n    public ApproveOrderTaskController(TaskService taskService) {\n        this.taskService = taskService;\n    }\n\n    @GetMapping(\"/{taskId}\")\n    public ResponseEntity&lt;ApproveTaskDto&gt; loadTask(@PathVariable(\"taskId\") String taskId) {\n        Order order = ORDER.from(taskService, taskId).get();\n        return ResponseEntity.ok(new ApproveTaskDto(order));\n    }\n\n    @PostMapping(\"/{taskId}\")\n    public ResponseEntity&lt;Void&gt; completeTask(@PathVariable(\"taskId\") String taskId, @RequestBody ApproveTaskCompleteDto userInput) {\n        VariableMap vars = builder()\n            .set(ORDER_APPROVED, userInput.getApproved())\n            .build();\n        taskService.complete(taskId, vars);\n        return ResponseEntity.noContent().build();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_testing_correct_variable_access\">Testing correct variable access<\/h3>\n<div class=\"paragraph\">\n<p>If you want to write the test for the REST controller, you will need to stub\nthe task service and verify that the correct variables has been set. To simplify\nthese tests, we created an additional library module <code>camunda-bpm-data-test<\/code>.\nPlease put the following dependency into your <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data-test&lt;/artifactId&gt;\n  &lt;version&gt;1.0.1&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Now you can use <code>TaskServiceVariableMockBuilder<\/code> to stub correct behavior of Camunda Task Service\nand <code>TaskServiceVerifier<\/code> to verify the correct access to variables easily. Here is the JUnit\ntest of the REST controller above, making use of <code>camunda-bpm-data-test<\/code>.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class ApproveOrderTaskControllerTest {\n\n    private static Order order = new Order(\"ORDER-ID-1\", new Date(), new ArrayList&lt;&gt;());\n    private TaskService taskService = mock(TaskService.class);\n    private TaskServiceMockVerifier verifier = taskServiceMockVerifier(taskService);\n    private ApproveOrderTaskController controller = new ApproveOrderTaskController(taskService);\n    private String taskId;\n\n    @Before\n    public void prepareTest() {\n        reset(taskService);\n        taskId = UUID.randomUUID().toString();\n    }\n\n    @Test\n    public void testLoadTask() {\n        // given\n        taskServiceVariableMockBuilder(taskService).initial(ORDER, order).build();\n        // when\n        ResponseEntity&lt;ApproveTaskDto&gt; responseEntity = controller.loadTask(taskId);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(responseEntity.getBody()).isEqualTo(new ApproveTaskDto(order));\n        verifier.verifyGet(ORDER, taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n\n    @Test\n    public void testCompleteTask() {\n        // when\n        ApproveTaskCompleteDto response = new ApproveTaskCompleteDto(true);\n        ResponseEntity&lt;Void&gt; responseEntity = controller.completeTask(taskId, response);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n        verifier.verifyComplete(builder().set(ORDER_APPROVED, response.getApproved()).build(), taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_further_documentation\">Further documentation<\/h3>\n<div class=\"paragraph\">\n<p>For further details, please consult our <a href=\"https://www.holunda.io/camunda-bpm-data/quick-start\">Quick Start<\/a>\nguide or have a look to our primary documentation - <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide\">the User Guide<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_working_example\">Working Example<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We prepared some typical usage scenarios and implemented two example projects in Java and Kotlin.\nSee our <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples\">Examples<\/a> section for usage and configuration.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_license\">License<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This library is developed under <a href=\"https://www.holunda.io/camunda-bpm-data/license\">Apache License 2<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_contribution\">Contribution<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to contribute to this project, feel free to do so. Start with <a href=\"http://holunda.io/camunda-bpm-data/wiki/developer-guide/contribution\">Contributing guide<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_maintainer\">Maintainer<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://gihub.com/zambrovski\">Simon Zambrovski<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/christian-maschmann\">Christian Maschmann<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/jangalinski\">Jan Galinski<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
      }]
    },
    "license": {
      "ownKey": "license",
      "ownPages": [{
        "reference": {
          "path": "",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "license",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/license"
        },
        "description": "",
        "title": "License",
        "content": ""
      }]
    },
    "wiki": {
      "ownKey": "wiki",
      "childrenPages": {
        "developer-guide": {
          "ownKey": "developer-guide",
          "childrenPages": {
            "contribution": {
              "ownKey": "contribution",
              "ownPages": [{
                "reference": {
                  "path": "wiki/developer-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "contribution",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/contribution"
                },
                "next": {
                  "path": "wiki/developer-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "project-setup",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/project-setup"
                },
                "description": "",
                "title": "Contribution",
                "content": "<div class=\"sect1\">\n<h2 id=\"_contribution\">Contribution<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several ways in which you may contribute to this project.<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>File new issues if you found a bug or missing feature<\/p>\n<\/li>\n<li>\n<p>Submit a pull request, if you have a solution for on of the issues<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_found_a_bug_or_missing_feature\">Found a bug or missing feature?<\/h3>\n<div class=\"paragraph\">\n<p>Please <a href=\"https://github.com/holuda-io/camunda-bpm-data/issues\">file an issue<\/a> in our\nissue tracking system.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_submit_a_pull_request\">Submit a Pull Request<\/h3>\n<div class=\"paragraph\">\n<p>If you found a solution to an <a href=\"https://github.com/holuda-io/camunda-bpm-data/issues\">open issue<\/a>\nand implemented it, we would be happy to add your contribution in the code base. For doing so,\nplease create a pull request. Prior to that, please make sure you<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>rebased against the <code>develop<\/code> branch<\/p>\n<\/li>\n<li>\n<p>sticked to project coding conventions<\/p>\n<\/li>\n<li>\n<p>added test cases for the problem you are solving<\/p>\n<\/li>\n<li>\n<p>added docs, describing the change<\/p>\n<\/li>\n<li>\n<p>generally complied with codeacy report<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
              }]
            },
            "project-setup": {
              "ownKey": "project-setup",
              "ownPages": [{
                "reference": {
                  "path": "wiki/developer-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "project-setup",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/project-setup"
                },
                "previous": {
                  "path": "wiki/developer-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "contribution",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/contribution"
                },
                "description": "",
                "title": "Project Setup",
                "content": "<div class=\"sect1\">\n<h2 id=\"_project_setup\">Project Setup<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are interested in developing and building the project please follow the following instruction.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_version_control\">Version control<\/h3>\n<div class=\"paragraph\">\n<p>To checkout sources of the project, please execute from your command line:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git clone https://github.com/holunda-io/camunda-bpm-data.git\ncd camunda-bpm-data<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>We are using gitflow in our git SCM. That means that you should start from <code>develop<\/code> branch,\ncreate a <code>feature/&lt;name&gt;<\/code> out of it and once it is completed create a pull request containing\nit. Please squash your commits before submitting and use semantic commit messages, if possible.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_project_build\">Project Build<\/h3>\n<div class=\"paragraph\">\n<p>Perform the following steps to get a development setup up and running.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw clean install<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_integration_tests\">Integration Tests<\/h3>\n<div class=\"paragraph\">\n<p>The default build command above will NOT run <code>failsafe<\/code> Maven plugin executing the integration tests\n(These are JUnit tests with class names ending with ITest). In order to run integration tests, please\ncall from your command line:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw -Pitest<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_project_build_modes_and_profiles\">Project build modes and profiles<\/h3>\n<div class=\"sect3\">\n<h4 id=\"_camunda_version\">Camunda Version<\/h4>\n<div class=\"paragraph\">\n<p>You can choose the used Camunda version by specifying the profile <code>camunda-ee<\/code> or <code>camunda-ce<\/code>. The default\nversion is a Community Edition. Specify <code>-Pcamunda-ee<\/code> to switch to Camunda Enterprise edition. This will\nrequire a valid Camunda license. You can put it into a file <code>~/.camunda/license.txt<\/code> and it will be detected\nautomatically.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_examples\">Examples<\/h4>\n<div class=\"paragraph\">\n<p>If you want to skip the build of examples, please specify the <code>-DskipExamples<\/code> switch in your command line.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_documentation\">Documentation<\/h4>\n<div class=\"paragraph\">\n<p>We are using <a href=\"https://github.com/orchidhq/Orchid\">JavaEden Orchid<\/a> for generation of a static site documentation and rely on AsciiDoc as much as possible.<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip<\/div>\n<\/td>\n<td class=\"content\">\nIf you want to develop your docs in 'live' mode, run <code>./mvnw -f docs -Pserve-docs<\/code> and access\nthe <a href=\"http://localhost:8080/\" class=\"bare\">http://localhost:8080/<\/a> from your browser.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>For creation of documentation, please run:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw -f docs<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Warning<\/div>\n<\/td>\n<td class=\"content\">\nThis operation requires special permissions. You need to replace <code>GITHUB_TOKEN<\/code> by the token of\nthe github pages repository, allowing to publish the pages.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to publish documentation to github pages, please run from command line<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw -f docs -Pdeploy-docs -DgithubToken=GITHUB_TOKEN<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_starting_example_application\">Starting example application<\/h4>\n<div class=\"paragraph\">\n<p>To start applications, either use your IDE and create run configuration for the classes:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>io.holunda.camunda.bpm.data.example.CamundaBpmDataProcessApplication<\/code><\/p>\n<\/li>\n<li>\n<p><code>io.holunda.camunda.bpm.data.example.kotlin.CamundaBpmDataKotlinExampleApplication<\/code><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"paragraph\">\n<p>Alternatively, you can run them from the command line:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvn spring-boot:run -f example/example-java\n./mvn spring-boot:run -f example/example-kotlin<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_continuous_integration\">Continuous Integration<\/h3>\n<div class=\"paragraph\">\n<p>Github Actions is building all branches on commit hook. In addition, a special action\nis building releases from master branch.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_release_management\">Release Management<\/h3>\n<div class=\"paragraph\">\n<p>Release management has been set-up for use of Sonatype Nexus (= Maven Central).<\/p>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_what_modules_get_deployed_to_repository\">What modules get deployed to repository<\/h4>\n<div class=\"paragraph\">\n<p>Currently, the following modules are released to OSS Maven Central:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>camunda-bpm-data-parent<\/p>\n<\/li>\n<li>\n<p>camunda-bpm-data<\/p>\n<\/li>\n<li>\n<p>camunda-bpm-data-test<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_trigger_new_release\">Trigger new release<\/h4>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Warning<\/div>\n<\/td>\n<td class=\"content\">\nThis operation requires special permissions.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>We use gitflow for development (see <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A successful git branching model<\/a>\nfor more details). You could use gitflow with native git commands, but then you would have\nto change the versions in the poms manually. Therefore we use the\n<a href=\"https://github.com/aleksandr-m/gitflow-maven-plugin/\">mvn gitflow plugin<\/a>, which handles this and other\nthings nicely.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>You can build a release with:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sh\" data-lang=\"sh\">./mvnw gitflow:release-start\n./mvnw gitflow:release-finish<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>This will update the versions in the <code>pom.xml<\/code> s accordingly and push the release tag to the <code>master<\/code> branch\nand update the <code>develop<\/code> branch for the new development version.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_create_feature_for_development\">Create feature for development<\/h4>\n<div class=\"paragraph\">\n<p>You can create a feature branch for development using:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sh\" data-lang=\"sh\">./mvnw gitflow:feature-start<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Warning<\/div>\n<\/td>\n<td class=\"content\">\nThis operation requires special permissions.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>After the feature is complete, create a PR. To merge the PR into develop use the command:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sh\" data-lang=\"sh\">./mvnw gitflow:feature-finish<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_trigger_a_deploy\">Trigger a deploy<\/h4>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Warning<\/div>\n<\/td>\n<td class=\"content\">\nThis operation requires special permissions.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>Currently, CI allows for deployment of artifacts to Maven Central and is executed via Github Actions.\nThis means, that a push to <code>master<\/code> branch will start the corresponding build job, and if successful the\nartifacts will get into <code>Staging Repositories<\/code> of OSS Sonatype without manual intervention. The repository\ngets automatically closed and released on successful upload.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If you still want to execute the the deployment from your local machine, you need to execute the\nfollowing command on the <code>master<\/code> branch:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sh\" data-lang=\"sh\">./mvnw clean deploy -B -DskipTests -DskipExamples -Prelease<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
              }]
            }
          },
          "ownPages": [
            {
              "reference": {
                "path": "wiki",
                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                "fileName": "developer-guide",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide"
              },
              "description": "",
              "title": "Developer Guide",
              "content": "<html>\n <head><\/head>\n <body>\n  <h2><a href=\"#\" class=\"anchor\"><\/a><\/h2> \n  <p><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/contribution\">Contribution<\/a><\/p> \n  <p><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/project-setup\">Project Setup<\/a><\/p> \n <\/body>\n<\/html>\n"
            },
            {
              "reference": {
                "path": "wiki/developer-guide",
                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                "fileName": "book",
                "extension": "pdf",
                "usePrettyUrl": false,
                "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/book.pdf"
              },
              "description": "",
              "title": "Developer Guide Book",
              "content": ""
            }
          ]
        },
        "user-guide": {
          "ownKey": "user-guide",
          "childrenPages": {
            "features": {
              "ownKey": "features",
              "ownPages": [{
                "reference": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "features",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features"
                },
                "next": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "examples-java",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-java"
                },
                "previous": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "motivation",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/motivation"
                },
                "description": "",
                "title": "Features",
                "content": "<div class=\"sect1\">\n<h2 id=\"_features\">Features<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Process Variables<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The library provides a way to construct a generic adapter for every process variable.<\/p>\n<\/li>\n<li>\n<p>The adapter contains variable type.<\/p>\n<\/li>\n<li>\n<p>The adapter can be applied in any context (<code>RuntimeService<\/code>, <code>TaskService<\/code>, <code>CaseService<\/code>, <code>DelegateExecution<\/code>, <code>DelegateTask<\/code>, <code>DelegateCaseExecution<\/code>, <code>VariableMap<\/code>).<\/p>\n<\/li>\n<li>\n<p>The adapter offers methods to read, write, update and remove variable values.<\/p>\n<\/li>\n<li>\n<p>The adapter works for all types supported by Camunda BPM. This includes primitive types, object and container types ( <code>List&lt;T&gt;<\/code>, <code>Set&lt;T&gt;<\/code>, <code>Map&lt;K , V&gt;<\/code> ).<\/p>\n<\/li>\n<li>\n<p>The adapter supports global / local variables.<\/p>\n<\/li>\n<li>\n<p>The adapter allows a default value or null in case a variable is not set.<\/p>\n<\/li>\n<li>\n<p>The adapter support transient variables.<\/p>\n<\/li>\n<li>\n<p>Fluent API helper are available in order to set, remove or update multiple variables in the same context (<code>VariableMapBuilder<\/code>, <code>VariableReader<\/code> and <code>GlobalVariableWriter<\/code>).<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Process Variable Guards<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Generic support for <code>VariableGuard<\/code> for evaluation of a list of `VariableCondition`s<\/p>\n<\/li>\n<li>\n<p>Condition to check if variable exists.<\/p>\n<\/li>\n<li>\n<p>Condition to check if variable doesn&#8217;t exist<\/p>\n<\/li>\n<li>\n<p>Condition to check if variable has a predefined value.<\/p>\n<\/li>\n<li>\n<p>Condition to check if variable has one of predefined values.<\/p>\n<\/li>\n<li>\n<p>Condition to check if variable matches condition specified by a custom function.<\/p>\n<\/li>\n<li>\n<p><code>DefaultGuardTaskListener<\/code> to construct variable conditions guards easily.<\/p>\n<\/li>\n<li>\n<p><code>DefaultGuardExecutionListener<\/code> to construct variable conditions guards easily.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Anti-Corruption-Layer<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Generic support for <code>AntiCorruptionLayer<\/code> for protection and influence of variable modification in signalling and message correlation.<\/p>\n<\/li>\n<li>\n<p>Helper methods for the client to wrap variables in a transient carrier.<\/p>\n<\/li>\n<li>\n<p>Execution listener to handle <code>VariableGuard<\/code>-based conditions and <code>VariableMapTransformer<\/code>-based modifications.<\/p>\n<\/li>\n<li>\n<p>Task listener to handle <code>VariableGuard<\/code>-based conditions and <code>VariableMapTransformer<\/code>-based modifications.<\/p>\n<\/li>\n<li>\n<p>Factory methods to create <code>AntiCorruptionLayer<\/code> with a <code>VariableGuard<\/code> (see <code>CamundaBpmDataACL<\/code>)<\/p>\n<\/li>\n<li>\n<p>Factory methods to create <code>AntiCorruptionLayer<\/code> without a <code>VariableGuard<\/code> (see <code>CamundaBpmDataMapper<\/code>)<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Testing variable access and mocking <code>RuntimeService<\/code>, <code>TaskService<\/code> and <code>CaseService<\/code>.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Builder to create Mockito-based behaviour of <code>RuntimeService<\/code> accessing variables.<\/p>\n<\/li>\n<li>\n<p>Builder to create Mockito-based behaviour of <code>TaskServiceService<\/code> accessing variables.<\/p>\n<\/li>\n<li>\n<p>Builder to create Mockito-based behaviour of <code>CaseServiceService<\/code> accessing variables.<\/p>\n<\/li>\n<li>\n<p>Verifier to check correct access to variables in  <code>RuntimeService<\/code><\/p>\n<\/li>\n<li>\n<p>Verifier to check correct access to variables in  <code>TaskService<\/code><\/p>\n<\/li>\n<li>\n<p>Verifier to check correct access to variables in  <code>CaseService<\/code><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
              }]
            },
            "further-outlook": {
              "ownKey": "further-outlook",
              "ownPages": [{
                "reference": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "further-outlook",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/further-outlook"
                },
                "previous": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "examples-kotlin",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin"
                },
                "description": "",
                "title": "Further outlook",
                "content": "<div class=\"sect1\">\n<h2 id=\"_further_outlook\">Further outlook<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Implement Contracts to be able to check guards automatically<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
              }]
            },
            "motivation": {
              "ownKey": "motivation",
              "ownPages": [{
                "reference": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "motivation",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/motivation"
                },
                "next": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "features",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features"
                },
                "description": "",
                "title": "Motivation",
                "content": "<div class=\"sect1\">\n<h2 id=\"_motivation\">Motivation<\/h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_typed_access_to_process_variables\">Typed access to process variables<\/h3>\n<div class=\"paragraph\">\n<p>Camunda BPM engine provide Java API to access the process variables.\nThis consists of:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>RuntimeService<\/code> methods<\/p>\n<\/li>\n<li>\n<p><code>TaskService<\/code> methods<\/p>\n<\/li>\n<li>\n<p>Methods on <code>DelegateExecution<\/code><\/p>\n<\/li>\n<li>\n<p>Methods on <code>DelegateTask<\/code><\/p>\n<\/li>\n<li>\n<p><code>VariableMap<\/code><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"paragraph\">\n<p>All those methods requires the user of the API to know the variable type.\nHere is a usage example:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ProcessInstance processInstance = ...;\nList&lt;OrderPosition&gt; orderPositions = (List&lt;OrderPosition&gt;) runtimeService\n  .getVariable(processInstance.id, \"orderPositions\");<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>This leads to problems during refactoring and makes variable access more complicated than it is. This library addresses\nthis issue and allows for more convenient type-safe process variable access.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>More details can be found in:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-1-2620bf9abd76\">Data in Process (Part 1)<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://medium.com/holisticon-consultants/data-in-process-part-2-7c6a109e6ee2\">Data in Process (Part 2)<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_guards\">Variable guards<\/h3>\n<div class=\"paragraph\">\n<p>Process automation often follows strict rules defined by the business. On the other hand, the process execution itself\ndefines rules in terms of pre- and post-conditions on the process payload (stored as process variables in Camunda BPM).\nRising complexity of the implemented processes makes the compliance to those rules challenging. In order to fulfill the\nconditions on process variables during the execution of business processes, a concept of <code>VariableGuard<\/code> is provided by\nthe library. A guard consists of a set of <code>VariableConditions<\/code> and can be evaluated in all contexts, the variables\nare used in: <code>DelegateTask<\/code>, <code>DelegateExecution<\/code>, <code>TaskService<\/code>, <code>RuntimeService<\/code>, <code>VariableMap<\/code>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Here is an example of a task listener verifying that a process variable <code>ORDER_APPROVED<\/code> is set, which\nwill throw a <code>GuardViolationException<\/code> if the condition is not met.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import static io.holunda.camunda.bpm.data.guard.CamundaBpmDataGuards.exists;\n\n@Component\nclass MyGuardListener extends DefaultGuardTaskListener {\n\n    public MyGuardListener() {\n        super(newArrayList(exists(ORDER_APPROVED)), true);\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_anti_corruption_layer\">Anti-Corruption-Layer<\/h3>\n<div class=\"paragraph\">\n<p>If a process is signalled or hit by a correlated message, there is no way to check if the transported variables are set correctly.\nIn addition, the variables are written directly to the execution of the correlated process instance. In case of a multi-instance\nevent-base sub-process this will eventually overwrite the values of the main execution.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>To prevent all this, a feature called Anti-Corruption-Layer (ACL) is implemented. An ACL is there to protect the execution\nfrom bad modifications and influence the way, the modification is executed. For the protection, an ACL relies on a Variables Guards,\ndefining conditions to be satisfied. For the influencing of modification, the <code>VariableMapTransformer<\/code> can be used.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>To use the ACL layer you will need to change the way you correlate messages (or signal the execution). Instead of supplying the variables\ndirectly to the <code>correlate<\/code> method of the <code>RuntimeService<\/code>, the client is wrapping all variables into a map hold by a single transient variable\nand correlate this variable with the process (we call this procedure variable wrapping). On the process side, an execution listener placed\non the end of the catch event is responsible to extract the variable map from the transient variable, check it by passing through the <code>VariablesGuard<\/code>\nand finally pass over to the <code>VariableMapTransformer<\/code> to map from external to internal representation.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Here is the code, required on the client side to correlate the message.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\nclass SomeService {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\", // name of the transient variable for wrapping\n        true, // if passes the guard, write to local scope\n        new VariablesGuard(exists(ORDER_ID)), // guard defining condition on ORDER_ID\n        IdentityVariableMapTransformer.INSTANCE // use 1:1 transformer\n                                                // write the variables without modifications\n    );\n\n    public void correlate() {\n        VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n        runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.checkAndWrap(variables));\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>On the process side, the BPMN message catch event should have an <code>End<\/code> listener responsible for unwrapping the values. If the listener is\nimplemented as a Spring Bean bounded via delegate expression <code>${messageAclListener}<\/code> then the following code is responsible for providing such a listener:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\nclass SomeConfiguration {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\", // name of the transient variable for wrapping\n        true, // if passes the guard, write to local scope\n        new VariablesGuard(exists(ORDER_ID)), // guard defining condition on ORDER_ID\n        IdentityVariableMapTransformer.INSTANCE // use 1:1 transformer\n                                                // write the variables without modifications\n    );\n\n    @Bean(\"messageAclListener\")\n    public ExecutionListener messageAclListener() {\n        return MY_ACL.getExecutionListener();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Such a setup will only allow to correlate messages, if the variables provided include a value for the <code>ORDER_ID<\/code>. It will write all\nvariables provided (<code>ORDER_ID<\/code> and <code>ORDER_APPROVED<\/code>) into a local scope of the execution.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
              }]
            },
            "examples-java": {
              "ownKey": "examples-java",
              "ownPages": [{
                "reference": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "examples-java",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-java"
                },
                "next": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "examples-kotlin",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin"
                },
                "previous": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "features",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features"
                },
                "description": "",
                "title": "Java Examples",
                "content": "<div class=\"sect1\">\n<h2 id=\"_java_examples\">Java Examples<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following example code demonstrates the usage of the library using Java.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_define_variable\">Define variable<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_read_variable_from_java_delegate\">Read variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      Boolean orderApproved = ORDER_APPROVED.from(execution).getLocal();\n      Optional&lt;BigDecimal&gt; orderTotal = ORDER_TOTAL.from(execution).getOptional();\n    };\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_write_variable_from_java_delegate\">Write variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import java.math.BigDecimal\n;@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = new OrderPosition(\"Pencil\", BigDecimal.valueOf(1.5), 1);\n      ORDER_POSITION.on(execution).set(orderPosition);\n    };\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_remove_variable_from_java_delegate\">Remove variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import java.math.BigDecimal\n;@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      ORDER_APPROVED.on(execution).removeLocal();\n    };\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_update_variable_from_java_delegate\">Update variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import java.math.BigDecimal;\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      ORDER_TOTAL.on(execution).updateLocal(amount -&gt; amount.add(orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount()))));\n    };\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_fluent_api_to_remove_several_variables\">Fluent API to remove several variables<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public ExecutionListener removeProcessVariables() {\n    return execution -&gt;\n    {\n      CamundaBpmData.writer(execution)\n          .remove(ORDER_ID)\n          .remove(ORDER)\n          .remove(ORDER_APPROVED)\n          .remove(ORDER_TOTAL)\n          .removeLocal(ORDER_POSITIONS);\n    };\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_fluent_api_to_set_several_variables\">Fluent API to set several variables<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\nclass SomeService {\n\n  @Autowired\n  private RuntimeService runtimeService;\n  @Autowired\n  private TaskService taskService;\n\n  public void setNewValuesForExecution(String executionId, String orderId, Boolean orderApproved) {\n      CamundaBpmData.writer(runtimeService, executionId)\n          .set(ORDER_ID, orderId)\n          .set(ORDER_APPROVED, orderApproved)\n          .update(ORDER_TOTAL, amount -&gt; amount.add(10));\n  }\n\n  public void setNewValuesForTask(String taskId, String orderId, Boolean orderApproved) {\n      CamundaBpmData.writer(taskService, taskId)\n          .set(ORDER_ID, orderId)\n          .set(ORDER_APPROVED, orderApproved);\n  }\n\n  public void start() {\n      VariableMap variables = CamundaBpmData.writer()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.startProcessInstanceById(\"myId\", \"businessKey\", variables);\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_fluent_api_to_read_several_variables\">Fluent API to read several variables<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\nclass SomeService {\n\n  @Autowired\n  private RuntimeService runtimeService;\n  @Autowired\n  private TaskService taskService;\n\n  public String readValuesFromExecution(String executionId) {\n      VariableReader reader = CamundaBpmData.reader(runtimeService, executionId);\n      String orderId = reader.get(ORDER_ID);\n      Boolean orderApproved = reader.get(ORDER_APPROVED);\n      if (orderApproved) {\n          // ...\n      }\n      return orderId;\n  }\n\n  public String readValuesFromTask(String taskId) {\n      VariableReader reader = CamundaBpmData.reader(taskService, taskId);\n      String orderId = reader.get(ORDER_ID);\n      Boolean orderApproved = reader.get(ORDER_APPROVED);\n      if (orderApproved) {\n          // ...\n      }\n      return orderId;\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_anti_corruption_layer_wrap_variables_to_correlate\">Anti-Corruption-Layer: Wrap variables to correlate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\nclass SomeService {\n\n  private static final AntiCorruptionLayer MESSAGE_ACL = CamundaBpmDataMapper.identityReplace(\n      \"__transient\",\n      true\n  );\n\n  public void correlate() {\n      VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.wrap(variables));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_anti_corruption_layer_check_and_wrap_variables_to_correlate\">Anti-Corruption-Layer: Check and wrap variables to correlate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\nclass SomeService {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\",\n        true,\n        new VariablesGuard(exists(ORDER_ID)),\n        IdentityVariableMapTransformer.INSTANCE\n    );\n\n  public void correlate() {\n      VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.checkAndWrap(variables));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_example_project\">Example project<\/h3>\n<div class=\"paragraph\">\n<p>For more examples, please check-out the Java Example project, at\n<a href=\"https://github.com/holunda-io/camunda-bpm-data/tree/develop/example/example-java\">Github<\/a><\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
              }]
            },
            "examples-kotlin": {
              "ownKey": "examples-kotlin",
              "ownPages": [{
                "reference": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "examples-kotlin",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin"
                },
                "next": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "further-outlook",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/further-outlook"
                },
                "previous": {
                  "path": "wiki/user-guide",
                  "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                  "fileName": "examples-java",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-java"
                },
                "description": "",
                "title": "Kotlin Examples",
                "content": "<div class=\"sect1\">\n<h2 id=\"_kotlin_examples\">Kotlin Examples<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following snippets demonstrate the usage of the library from Kotlin<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_define_variable\">Define variable<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import io.holunda.data.CamundaBpmDataKotlin\n\nobject Variables {\n    val ORDER_ID = stringVariable(\"orderId\")\n    val ORDER: VariableFactory&lt;Order&gt; = customVariable(\"order\")\n    val ORDER_APPROVED = booleanVariable(\"orderApproved\")\n    val ORDER_POSITION: VariableFactory&lt;OrderPosition&gt; = customVariable(\"orderPosition\")\n    val ORDER_TOTAL: VariableFactory&lt;BigDecimal&gt; = customVariable(\"orderTotal\")\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_read_variable_from_java_delegate\">Read variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        // order position is of type OrderPosition\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_write_variable_from_java_delegate\">Write variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import java.math.BigDecimal\n\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        ORDER_TOTAL.on(execution).set {\n            orderPosition.netCost.times(BigDecimal.valueOf(orderPosition.amount))\n        }\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_remove_variable_from_java_delegate\">Remove variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun removeTotal() = JavaDelegate { execution -&gt;\n        ORDER_TOTAL.on(execution).remove()\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_update_variable_from_java_delegate\">Update variable from Java delegate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import java.math.BigDecimal\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        ORDER_TOTAL.on(execution).update {\n            it.plus(orderPosition.netCost.times(BigDecimal.valueOf(orderPosition.amount)))\n        }\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_fluent_api_to_remove_several_variables\">Fluent API to remove several variables<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import io.holunda.camunda.bpm.data.remove\n\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun removeProcessVariables() = JavaDelegate { execution -&gt;\n        execution\n            .remove(ORDER_ID)\n            .remove(ORDER)\n            .remove(ORDER_APPROVED)\n            .remove(ORDER_TOTAL)\n            .removeLocal(ORDER_POSITIONS)\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_fluent_api_to_set_several_variables\">Fluent API to set several variables<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Component\nclass SomeService(\n    private val runtimeService: RuntimeService,\n    private val taskService: TaskService\n) {\n\n    fun setNewValuesForExecution(executionId: String, rderId: String, orderApproved: Boolean) {\n        runtimeService.writer(executionId)\n            .set(ORDER_ID, orderId)\n            .set(ORDER_APPROVED, orderApproved)\n            .update(ORDER_TOTAL, { amount -&gt; amount.add(10) })\n    }\n\n    fun setNewValuesForTask(taskId: String, orderId: String, orderApproved: Boolean) {\n        taskService.writer(taskId)\n            .set(ORDER_ID, orderId)\n            .set(ORDER_APPROVED, orderApproved)\n    }\n\n  fun start() {\n      val variables = createProcessVariables()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n      runtimeService.startProcessInstanceById(\"myId\", \"businessKey\", variables)\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_fluent_api_to_read_several_variables\">Fluent API to read several variables<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Component\nclass SomeService(\n  private val runtimeService: RuntimeService,\n  private val taskService: TaskService\n) {\n\n  fun readValuesFromExecution(executionId: String): String {\n      val reader = CamundaBpmData.reader(runtimeService, executionId)\n      val orderId = reader.get(ORDER_ID)\n      val orderApproved = reader.get(ORDER_APPROVED)\n      if (orderApproved) {\n          // ...\n      }\n      return orderId\n  }\n\n  fun readValuesFromTask(taskId: String ): String {\n      val reader = CamundaBpmData.reader(taskService, taskId)\n      val orderId = reader.get(ORDER_ID)\n      val orderApproved = reader.get(ORDER_APPROVED)\n      if (orderApproved) {\n          // ...\n      }\n      return orderId\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_anti_corruption_layer_wrap_variables_to_correlate\">Anti-Corruption-Layer: Wrap variables to correlate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Component\nclass SomeService {\n\n  val MESSAGE_ACL = CamundaBpmDataMapper.identityReplace(\"__transient\", true);\n\n  fun correlate() {\n      val variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.wrap(variables));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_anti_corruption_layer_check_and_wrap_variables_to_correlate\">Anti-Corruption-Layer: Check and wrap variables to correlate<\/h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Component\nclass SomeService {\n\n    val MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\",\n        true,\n        VariablesGuard(exists(ORDER_ID)),\n        IdentityVariableMapTransformer\n    );\n\n  fun correlate() {\n      val variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.checkAndWrap(variables));\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_example_project\">Example project<\/h3>\n<div class=\"paragraph\">\n<p>For more examples, please check-out the Kotlin Example project, at\n<a href=\"https://github.com/holunda-io/camunda-bpm-data/tree/develop/example/example-kotlin\">Github<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
              }]
            }
          },
          "ownPages": [
            {
              "reference": {
                "path": "wiki",
                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                "fileName": "user-guide",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide"
              },
              "description": "",
              "title": "User Guide",
              "content": "<html>\n <head><\/head>\n <body>\n  <h2><a href=\"#\" class=\"anchor\"><\/a><\/h2> \n  <ul> \n   <li><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/motivation\">Motivation<\/a><\/li> \n   <li><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features\">Features<\/a><\/li> \n   <li><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-java\">Java Examples<\/a><\/li> \n   <li><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin\">Kotlin Examples<\/a><\/li> \n   <li><a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/further-outlook\">Further Outlook<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
            },
            {
              "reference": {
                "path": "wiki/user-guide",
                "baseUrl": "https://www.holunda.io/camunda-bpm-data",
                "fileName": "book",
                "extension": "pdf",
                "usePrettyUrl": false,
                "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/book.pdf"
              },
              "description": "",
              "title": "User Guide Book",
              "content": ""
            }
          ]
        }
      },
      "ownPages": [{
        "reference": {
          "path": "",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "wiki",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/wiki"
        },
        "description": "",
        "title": "Wiki",
        "content": ""
      }]
    },
    "changelog": {
      "ownKey": "changelog",
      "ownPages": [{
        "reference": {
          "path": "",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "changelog",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/changelog"
        },
        "description": "",
        "title": "Changelog",
        "content": ""
      }]
    },
    "quick-start": {
      "ownKey": "quick-start",
      "ownPages": [{
        "reference": {
          "path": "",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "quick-start",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/quick-start"
        },
        "description": "",
        "title": "Quick Start",
        "content": "<div class=\"sect1\">\n<h2 id=\"_quick_start\">Quick Start<\/h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_add_dependency\">Add dependency<\/h3>\n<div class=\"paragraph\">\n<p>In Apache Maven add to your <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-bpm-data.version}&lt;/version&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>For Gradle Kotlin DSL add to your <code>build.gradle.kts<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">implementation(\"io.holunda.data:camunda-bpm-data:${camunda-bpm-data.version}\")<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>For Gradle Groovy DSL add to your <code>build.gradle<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">implementation 'io.holunda.data:camunda-bpm-data:${camunda-bpm-data.version}'<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_declare_process_variable_factories\">Declare process variable factories<\/h3>\n<div class=\"paragraph\">\n<p>First you have to define your process variables, by providing the variable name and type. For providing the type,\ndifferent convenience methods exist:<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Here is a example in Java:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import io.holunda.camunda.bpm.data.factory.VariableFactory;\nimport static io.holunda.camunda.bpm.data.CamundaBpmData.*;\n\npublic class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_access_process_variables_from_java_delegate\">Access process variables from Java Delegate<\/h3>\n<div class=\"paragraph\">\n<p>If you want to access the process variable, call methods on the <code>ProcessVariableFactory<\/code> to configure the usage context,\nand then invoke the variable access methods.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Here is an example, how it looks like to access variable from <code>JavaDelegate<\/code> implemented in Java. In this example,\nthe total amount is calculated from the amounts of order positions and stored in the process variable.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      BigDecimal oldTotal = ORDER_TOTAL.from(execution).getOptional().orElse(BigDecimal.ZERO);\n      BigDecimal newTotal = oldTotal.add(orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount())));\n      ORDER_TOTAL.on(execution).setLocal(newTotal);\n    };\n  }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_variable_access_from_rest_controller\">Variable access from REST Controller<\/h3>\n<div class=\"paragraph\">\n<p>Now imagine you are implementing a REST controller for a user task form which\nloads data from the process application, displays it, captures some input and\nsends that back to the process application to complete the user task. By doing so,\nyou will usually need to access process variables. Here is an example:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/task/approve-order\")\npublic class ApproveOrderTaskController {\n\n    private final TaskService taskService;\n\n    public ApproveOrderTaskController(TaskService taskService) {\n        this.taskService = taskService;\n    }\n\n    @GetMapping(\"/{taskId}\")\n    public ResponseEntity&lt;ApproveTaskDto&gt; loadTask(@PathVariable(\"taskId\") String taskId) {\n        Order order = ORDER.from(taskService, taskId).get();\n        return ResponseEntity.ok(new ApproveTaskDto(order));\n    }\n\n    @PostMapping(\"/{taskId}\")\n    public ResponseEntity&lt;Void&gt; completeTask(@PathVariable(\"taskId\") String taskId, @RequestBody ApproveTaskCompleteDto userInput) {\n        VariableMap vars = builder()\n            .set(ORDER_APPROVED, userInput.getApproved())\n            .build();\n        taskService.complete(taskId, vars);\n        return ResponseEntity.noContent().build();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_testing_correct_variable_access\">Testing correct variable access<\/h3>\n<div class=\"paragraph\">\n<p>If you want to write the test for the REST controller, you will need to stub\nthe task service and verify that the correct variables has been set. To simplify\nthese tests, we created an additional library module <code>camunda-bpm-data-test<\/code>.\nPlease put the following dependency into your <code>pom.xml<\/code>:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data-test&lt;/artifactId&gt;\n  &lt;version&gt;1.0.2&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Now you can use <code>TaskServiceVariableMockBuilder<\/code> to stub correct behavior of Camunda Task Service\nand <code>TaskServiceVerifier<\/code> to verify the correct access to variables easily. Here is the JUnit\ntest of the REST controller above, making use of <code>camunda-bpm-data-test<\/code>.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class ApproveOrderTaskControllerTest {\n\n    private static Order order = new Order(\"ORDER-ID-1\", new Date(), new ArrayList&lt;&gt;());\n    private TaskService taskService = mock(TaskService.class);\n    private TaskServiceMockVerifier verifier = taskServiceMockVerifier(taskService);\n    private ApproveOrderTaskController controller = new ApproveOrderTaskController(taskService);\n    private String taskId;\n\n    @Before\n    public void prepareTest() {\n        reset(taskService);\n        taskId = UUID.randomUUID().toString();\n    }\n\n    @Test\n    public void testLoadTask() {\n        // given\n        taskServiceVariableMockBuilder(taskService).initial(ORDER, order).build();\n        // when\n        ResponseEntity&lt;ApproveTaskDto&gt; responseEntity = controller.loadTask(taskId);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(responseEntity.getBody()).isEqualTo(new ApproveTaskDto(order));\n        verifier.verifyGet(ORDER, taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n\n    @Test\n    public void testCompleteTask() {\n        // when\n        ApproveTaskCompleteDto response = new ApproveTaskCompleteDto(true);\n        ResponseEntity&lt;Void&gt; responseEntity = controller.completeTask(taskId, response);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n        verifier.verifyComplete(builder().set(ORDER_APPROVED, response.getApproved()).build(), taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
      }]
    },
    "readme": {
      "ownKey": "readme",
      "ownPages": [{
        "reference": {
          "path": "",
          "baseUrl": "https://www.holunda.io/camunda-bpm-data",
          "fileName": "readme",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://www.holunda.io/camunda-bpm-data/readme"
        },
        "description": "",
        "title": "Readme",
        "content": ""
      }]
    }
  },
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://www.holunda.io/camunda-bpm-data"
      },
      "description": "",
      "title": "Home",
      "content": "<h2 id=\"why-should-i-use-this\"><a href=\"#why-should-i-use-this\" id=\"why-should-i-use-this\" class=\"anchor\"><\/a>Why should I use this?<\/h2>\n<p>If you are a software engineer and run process automation projects in your company or on behalf of the customer\nbased on Camunda Process Engine, you probably are familiar with process variables. Camunda offers an API to access\nthem and thereby manipulate the state of the process execution - one of the core features during process automation.<\/p>\n<p>Unfortunately, as a user of the Camunda API, you have to exactly know the variable type (so the Java class behind it).\nFor example, if you store a String in a variable <code>&quot;orderId&quot;<\/code> you must extract it as a String in every piece of code.\nSince there is no code connection between the different code parts, but the BPMN process model orchestrates\nthese snippets to a single process execution, it makes refactoring and testing of process automation projects\nerror-prone and challenging.<\/p>\n<p>This library helps you to overcome these difficulties and make access, manipulation and testing process variables really\neasy and convenient. We leverage the Camunda API and offer you not only a better API but also some <a href=\"https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features\">additional features<\/a>.<\/p>\n<h2 id=\"how-to-start\"><a href=\"#how-to-start\" id=\"how-to-start\" class=\"anchor\"><\/a>How to start?<\/h2>\n<p>A good starting point is the <a href=\"./quick-start\">Quick Start<\/a>. For more detailed documentation, please have a look at\n<a href=\"./wiki/user-guide\">User Guide<\/a>.<\/p>\n<h2 id=\"get-in-touch\"><a href=\"#get-in-touch\" id=\"get-in-touch\" class=\"anchor\"><\/a>Get in touch<\/h2>\n<p>If you are missing a feature, have a question regarding usage or deployment, you should definitely get in touch\nwith the us. There are various ways to do so:<\/p>\n<ul>\n<li><a href=\"https://gitter.im/holunda-io/camunda-bpm-data?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/holunda-io/camunda-bpm-data.svg\" alt=\"Gitter\" /><\/a><\/li>\n<li><a href=\"https://holunda.slack.com/messages/camunda-bpm-data/\">Slack<\/a><\/li>\n<li><a href=\"https://github.com/holunda-io/camunda-bpm-data/issues\">Github Issues<\/a><\/li>\n<li><a href=\"./wiki/developer-guide\">Developer Guide<\/a><\/li>\n<\/ul>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://www.holunda.io/camunda-bpm-data",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://www.holunda.io/camunda-bpm-data/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}